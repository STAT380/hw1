{
  "metadata": {
    "kernelspec": {
      "name": "ir",
      "display_name": "R",
      "language": "R"
    },
    "language_info": {
      "name": "R",
      "codemirror_mode": "r",
      "pygments_lexer": "r",
      "mimetype": "text/x-r-source",
      "file_extension": ".r",
      "version": "4.0.5"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [],
      "dockerImageVersionId": 30618,
      "isInternetEnabled": false,
      "language": "r",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# 1 --> R code to generate the matrix as given in question\n",
        "\n",
        "# sol -->\n",
        "generate_matrix1 <- function() {\n",
        "  matrix(1:9, nrow = 3, byrow = TRUE)\n",
        "}\n",
        "\n",
        "generate_matrix2 <- function() {\n",
        "  r1 <- 1:100\n",
        "  r2 <- (1:100)^2\n",
        "  matrix(c(r1, r2), nrow = 2)\n",
        "}\n",
        "\n",
        "matrix1 <- generate_matrix1()\n",
        "matrix2 <- generate_matrix2()\n",
        "\n",
        "print(matrix1)\n",
        "print(matrix2)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-01-26T19:55:12.267577Z",
          "iopub.execute_input": "2024-01-26T19:55:12.269940Z",
          "iopub.status.idle": "2024-01-26T19:55:12.451619Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IpiEcbzyeDzd",
        "outputId": "60962d54-b380-4491-fdfb-f0bd0cd9a38a"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     [,1] [,2] [,3]\n",
            "[1,]    1    2    3\n",
            "[2,]    4    5    6\n",
            "[3,]    7    8    9\n",
            "     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n",
            "[1,]    1    3    5    7    9   11   13   15   17    19    21    23    25    27\n",
            "[2,]    2    4    6    8   10   12   14   16   18    20    22    24    26    28\n",
            "     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]\n",
            "[1,]    29    31    33    35    37    39    41    43    45    47    49    51\n",
            "[2,]    30    32    34    36    38    40    42    44    46    48    50    52\n",
            "     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]\n",
            "[1,]    53    55    57    59    61    63    65    67    69    71    73    75\n",
            "[2,]    54    56    58    60    62    64    66    68    70    72    74    76\n",
            "     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]\n",
            "[1,]    77    79    81    83    85    87    89    91    93    95    97    99\n",
            "[2,]    78    80    82    84    86    88    90    92    94    96    98   100\n",
            "     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]\n",
            "[1,]     1     9    25    49    81   121   169   225   289   361   441   529\n",
            "[2,]     4    16    36    64   100   144   196   256   324   400   484   576\n",
            "     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]\n",
            "[1,]   625   729   841   961  1089  1225  1369  1521  1681  1849  2025  2209\n",
            "[2,]   676   784   900  1024  1156  1296  1444  1600  1764  1936  2116  2304\n",
            "     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]\n",
            "[1,]  2401  2601  2809  3025  3249  3481  3721  3969  4225  4489  4761  5041\n",
            "[2,]  2500  2704  2916  3136  3364  3600  3844  4096  4356  4624  4900  5184\n",
            "     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]\n",
            "[1,]  5329  5625  5929  6241  6561  6889  7225  7569  7921  8281  8649  9025\n",
            "[2,]  5476  5776  6084  6400  6724  7056  7396  7744  8100  8464  8836  9216\n",
            "     [,99] [,100]\n",
            "[1,]  9409   9801\n",
            "[2,]  9604  10000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2 --> Write a function row_wise_scan which scans the entries of M one row after another and outputs the number of elements whose value is >=0\n",
        "\n",
        "#sol -->\n",
        "row_wise_scan <- function(X){\n",
        "    n = ncol(X)\n",
        "    m = nrow(X)\n",
        "    count = 0\n",
        "    for(i in 1:m){\n",
        "        for(j in 1:n){\n",
        "            if(X[i, j] >= 0){\n",
        "                count <- count + 1\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "    return(count)\n",
        "}\n",
        "\n",
        "m1 <- row_wise_scan(matrix1)\n",
        "m2 <- row_wise_scan(matrix2)\n",
        "\n",
        "print(m1)\n",
        "print(m2)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-01-26T20:02:22.182484Z",
          "iopub.execute_input": "2024-01-26T20:02:22.213860Z",
          "iopub.status.idle": "2024-01-26T20:02:22.241171Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j_T1aoL1eDzh",
        "outputId": "b210d0cc-baab-4000-9d40-33c1120dbf3f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] 9\n",
            "[1] 200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3 --> Write a function col_wise_scan which does exactly the same thing but scans the entries of M one column after another\n",
        "\n",
        "# sol -->\n",
        "col_wise_scan <- function(X){\n",
        "    n = ncol(X)\n",
        "    m = nrow(X)\n",
        "    count = 0\n",
        "    for(j in 1:n){\n",
        "        for(i in 1:m){\n",
        "            if(X[i, j] >= 0){\n",
        "                count <- count + 1\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "    return(count)\n",
        "}\n",
        "\n",
        "print(col_wise_scan(matrix1))\n",
        "print(col_wise_scan(matrix2))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-01-26T20:04:06.430599Z",
          "iopub.execute_input": "2024-01-26T20:04:06.432305Z",
          "iopub.status.idle": "2024-01-26T20:04:06.463498Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3aCxdqMBeDzj",
        "outputId": "031117ee-fcc6-4a9f-d467-e25b062a060d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] 9\n",
            "[1] 200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4 - Between col_wise_scan and row_wise_scan, which function do you expect to take shorter to run? Why?**\n",
        "\n",
        "**Ans**\n",
        "> As we know matrices are stored in column-major order in R, which implies that it stores the elements column by column. Therefore, col_wise_scan is expected to be run faster because it accesses the elements in the order of how they are stored in memory, which is more efficient than row_wise_scan."
      ],
      "metadata": {
        "id": "CTCy-8wEeDzk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 5 --> Write a function time_scan which takes in a method f and a matrix M and outputs the amount of time taken to run f(M)\n",
        "\n",
        "#sol -->\n",
        "time_scan <- function(f, M){\n",
        "    initial_time <- Sys.time()\n",
        "    f(M)\n",
        "    final_time <- Sys.time()\n",
        "    total_time_taken <- final_time - initial_time\n",
        "    return(total_time_taken)\n",
        "}\n",
        "\n",
        "\n",
        "# Time row-wise scan on matrix1\n",
        "time_row_matrix1 <- time_scan(row_wise_scan, matrix1)\n",
        "print(paste(\"Time for M1 row-wise scan: \", time_row_matrix1))\n",
        "\n",
        "# Time column-wise scan on matrix1\n",
        "time_col_matrix1 <- time_scan(col_wise_scan, matrix1)\n",
        "print(paste(\"Time for column-wise scan on M!: \", time_col_matrix1))\n",
        "\n",
        "# Time row-wise scan on matrix2\n",
        "time_row_matrix2 <- time_scan(row_wise_scan, matrix2)\n",
        "print(paste(\"Time taken for row-wise scan on matrix2: \", time_row_matrix2))\n",
        "\n",
        "# Time column-wise scan on matrix2\n",
        "time_col_matrix2 <- time_scan(col_wise_scan, matrix2)\n",
        "print(paste(\"Time taken for column-wise scan on matrix2: \", time_col_matrix2))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-01-26T20:10:39.273778Z",
          "iopub.execute_input": "2024-01-26T20:10:39.275330Z",
          "iopub.status.idle": "2024-01-26T20:10:39.326105Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PbEoM_9eeDzm",
        "outputId": "8518b1dc-ce21-4afb-98b4-470a80efd8a0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] \"Time for M1 row-wise scan:  4.72068786621094e-05\"\n",
            "[1] \"Time for column-wise scan on M!:  3.31401824951172e-05\"\n",
            "[1] \"Time taken for row-wise scan on matrix2:  5.67436218261719e-05\"\n",
            "[1] \"Time taken for column-wise scan on matrix2:  9.39369201660156e-05\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 6 --> Repeat this experiment now when M is a 100 x 100 matrix, a 1000 x 1000 matrix, and a 5000 x 5000 matrix\n",
        "\n",
        "# SOL -->\n",
        "\n",
        "generate_matrix <- function(n){\n",
        "    return(\n",
        "        matrix(\n",
        "            rnorm(n^2),\n",
        "            nrow=n\n",
        "        )\n",
        "    )\n",
        "}\n",
        "\n",
        "M1 <- generate_matrix(100)\n",
        "M2 <- generate_matrix(1000)\n",
        "M3 <- generate_matrix(5000)\n",
        "\n",
        "# Time row-wise scan\n",
        "time_row1 <- time_scan(row_wise_scan, M1)\n",
        "time_row2 <- time_scan(row_wise_scan, M2)\n",
        "time_row3 <- time_scan(row_wise_scan, M3)\n",
        "\n",
        "# Time column-wise scan\n",
        "time_col1 <- time_scan(col_wise_scan, M1)\n",
        "time_col2 <- time_scan(col_wise_scan, M2)\n",
        "time_col3 <- time_scan(col_wise_scan, M3)\n",
        "\n",
        "# Print time taken for row-wise scan\n",
        "print(paste(\"Time taken for row-wise scan on M1: \", time_row1))\n",
        "print(paste(\"Time taken for row-wise scan on M2: \", time_row2))\n",
        "print(paste(\"Time taken for row-wise scan on M3: \", time_row3))\n",
        "\n",
        "# Print time taken for column-wise scan\n",
        "print(paste(\"Time taken for column-wise scan on M1: \", time_col1))\n",
        "print(paste(\"Time taken for column-wise scan on M2: \", time_col2))\n",
        "print(paste(\"Time taken for column-wise scan on M3: \", time_col3))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-01-26T20:15:39.217086Z",
          "iopub.execute_input": "2024-01-26T20:15:39.218975Z",
          "iopub.status.idle": "2024-01-26T20:15:46.271800Z"
        },
        "trusted": true,
        "id": "810Zb9gweDzo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7 -- What can you conclude?**\n",
        "\n",
        "**Ans** -\n",
        "> As expected col-wise scan takes less time than row-wise scan. Based on the time readings, both `row_wise_scan` and `col_wise_scan` functions have similar execution times for a 100x100 matrix. However, for larger matrices, `col_wise_scan` is slightly faster. This is likely due to R's column-major order storage, where it stores elements column by column."
      ],
      "metadata": {
        "id": "lQjWNAC4eDzq"
      }
    }
  ]
}